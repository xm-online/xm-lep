buildscript {
    // include versions script
    apply from: rootProject.file('gradle/lib-versions.gradle')

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0") {
            // Prevent WARNING: xerces entityExpansionLimit and accessExternalDTD
            // generated by `io.codearte.nexus-staging` plugin transitive dependency
            exclude group: 'xerces', module: 'xercesImpl'
        }
    }

}

plugins {
    // plugin for support environment's with gradle.properties (gradle-local.properties is default local environment)
    id 'net.saliman.properties' version '1.4.6'
    id 'org.dm.bundle' version '0.10.0' apply false

    id 'org.ajoberstar.grgit' version '2.1.0'
    id 'org.ajoberstar.reckon' version '0.3.0'
}

apply plugin: 'base'
apply plugin: 'io.codearte.nexus-staging'

// project parameters
project.group = property('app.group')
project.description = property('app.description')
project.version = property('app.version')

reckon {
    normal = scopeFromProp()
    preRelease = stageFromProp('milestone', 'rc', 'final')
    // alternately
    // preRelease = snapshotFromProp()
}
// init project version
apply from: rootProject.file('gradle/version.gradle')

apply from: rootProject.file('gradle/git.gradle')

task wrapper(type: Wrapper) {
    gradleVersion = "${versions.gradle}"
}

allprojects {
    group = property('app.group')
}

apply from: rootProject.file('gradle/nexus-staging.gradle')

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'
    apply from: rootProject.file('gradle/org-dm-bundle.gradle')

    version = parent.version

    repositories {
        mavenCentral()
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    [compileJava, compileTestJava]*.options.collect {
        options -> options.encoding = "UTF-8"
    }

    test {
        systemProperty("java.awt.headless", "true")
        systemProperty("testGroups", project.properties.get("testGroups"))

        scanForTestClasses = false
        include(["**/*Tests.class", "**/*Test.class"])
        // Since we set scanForTestClasses to false, we need to filter out inner
        // classes with the "$" pattern; otherwise, using -Dtest.single=MyTests to
        // run MyTests by itself will fail if MyTests contains any inner classes.
        exclude(["**/Abstract*.class", '**/*$*'])
        reports.html.enabled = true
        testLogging {
            exceptionFormat = 'full'
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    }

    javadoc {
        description = "Generates project-level javadoc for use in -javadoc jar"

        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
        options.use = true
        //options.links(project.ext.javadocLinks)
        options.addStringOption('Xdoclint:none', '-quiet')

        // Suppress warnings due to cross-module @see and @link references.
        // Note that global 'api' task does display all warnings.
        //logging.captureStandardError LogLevel.INFO
        //logging.captureStandardOutput LogLevel.INFO  // suppress "## warnings" message
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        // We only want to require signing if we are building a release version and we are going to publish it.
        // Because we are inspecting the task graph to determine if we are going to be publishing,
        // we must set the signing.required property to a closure to defer the evaluation
        required {
            isRelease(project) && gradle.taskGraph.hasTask("uploadArchives")
        }
        sign configurations.archives
    }

    checkstyle {
        toolVersion = versions.checkstyle
        ignoreFailures = true
        configFile = rootProject.file('qa/checkstyle.xml')
        sourceSets = [sourceSets.main]
    }

    findbugs {
        toolVersion = versions.findbugs
        ignoreFailures = true
        sourceSets = [sourceSets.main]
    }

    pmd {
        rulePriority = 3
        toolVersion = versions.pmd
        ignoreFailures = true
        ruleSetFiles = rootProject.files('qa/pmd.xml')
        sourceSets = [sourceSets.main]
    }

    // use `afterEvaluate` for init some pom values or jar manifest from sub-projects (for example: description)
    afterEvaluate {

        uploadArchives {
            def projectDescription = ((project.description != null) ? project.description : project.name)

            jar {
                manifest {
                    attributes(
                        'Implementation-Vendor': project.property('app.vendor'),
                        'Specification-Title': projectDescription,
                        'SCM-Branch': rootProject.ext.gitBranch,
                        'SCM-Revision': rootProject.ext.gitRevision,
                        'SCM-Revision-Abbreviated': rootProject.ext.gitAbbreviatedRevision
                    )
                }
            }

            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    if (!project.hasProperty('ossrhUsername') || !project.hasProperty('ossrhPassword')) {
                        logger.lifecycle("No OSS RH user credentail defined - you can't deploy artifacts")
                    } else {
                        if (isRelease(project)) {
                            // id: 'sonatype-nexus-staging',
                            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                                authentication(userName: ossrhUsername, password: ossrhPassword)
                            }
                        } else {
                            // id: 'sonatype-nexus-snapshots'
                            repository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                                authentication(userName: ossrhUsername, password: ossrhPassword)
                            }
                        }

                        //repository(url: "file://" + rootProject.buildDir.absolutePath + File.separatorChar + "mvn-local-repo") {
                        //}

                        //snapshotRepository(id: 'sonatype-nexus-snapshots',
                        //    url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                        //    authentication(userName: ossrhUsername, password: ossrhPassword)
                        //}
                    }

                    pom.project {
                        packaging 'jar'
                        name project.name
                        description projectDescription
                        url 'https://xm.icthh.com'

                        scm {
                            url 'https://github.com/xm-online/xm-lep'
                            connection 'scm:git:git://github.com/xm-online/xm-lep.git'
                            developerConnection 'scm:git:git://github.com/xm-online/xm-lep.git'
                        }

                        licenses {
                            license {
                                name 'The Apache License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id 'adovbnya'
                                name 'Alexander Dovbnya'
                                email 'adovbnya@icthh.com'
                            }
                        }
                    }

                    // remove test dependencies from pom file
                    pom.withXml {
                        Node pomNode = asNode()
                        pomNode.dependencies.'*'.findAll() {
                            it.scope.text() == 'test'
                        }.each() {
                            it.parent().remove(it)
                        }
                    }
                }
            }
        }
    }

}

boolean isRelease(Project project) {
    def semVer = SemVersion.valueOf(String.valueOf(project.version))
    return semVer.isRelease()
}

clean.doFirst {
    delete rootProject.buildDir
}
